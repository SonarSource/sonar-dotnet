//
// SonarAnalyzer for .NET
// Copyright (C) 2015-2024 SonarSource SA
// mailto:contact@sonarsource.com
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
//

syntax = "proto3";
package sonaranalyzer;

option csharp_namespace = "SonarAnalyzer.Protobuf";
option java_package = "org.sonarsource.dotnet.protobuf";
option java_outer_classname = "SonarAnalyzer";

option optimize_for = SPEED;

// Naming convention:
// we use singular for repeated field names, because that works better in Java, and we don't care in C#

// Lines start at 1 and line offsets start at 0
message TextRange {
  int32 start_line = 1;
  // End line (inclusive)
  int32 end_line = 2;
  int32 start_offset = 3;
  int32 end_offset = 4;
}

enum TokenType {
  UNKNOWN_TOKENTYPE = 0;
  TYPE_NAME = 1;
  NUMERIC_LITERAL = 2;
  STRING_LITERAL = 3;
  KEYWORD = 4;
  COMMENT = 5;
}

// Used for code coloring
message TokenTypeInfo {
  string file_path = 1;

  message TokenInfo {
    TokenType token_type = 1;
    TextRange text_range = 2;
  }

  repeated TokenInfo token_info = 2;
}

// Used for symbol reference highlighting
message SymbolReferenceInfo {
  string file_path = 1;

  message SymbolReference {
    TextRange declaration = 1;
    repeated TextRange reference = 2;
  }

  repeated SymbolReference reference = 2;
}

// Used for copy-paste detection
message CopyPasteTokenInfo {
  string file_path = 1;

  message TokenInfo {
    string token_value = 1;
    TextRange text_range = 2;
  }

  repeated TokenInfo token_info = 2;
}

// Metrics reporting
message MetricsInfo {
  string file_path = 1;

  int32 class_count = 2;
  int32 statement_count = 3;
  int32 function_count = 4;

  int32 complexity = 7;

  repeated int32 no_sonar_comment = 12;
  repeated int32 non_blank_comment = 13;
  repeated int32 code_line = 14;

  int32 cognitive_complexity = 15;
  repeated int32 executable_lines = 16;
}

message FileMetadataInfo {
  string file_path = 1;
  bool is_generated = 2;
  string encoding = 3;
}

// Logging
enum LogSeverity {
  UNKNOWN_SEVERITY = 0;
  DEBUG = 1;
  INFO = 2;
  WARNING = 3;
}

message LogInfo {
    LogSeverity severity = 1;
    string text = 2;
}

